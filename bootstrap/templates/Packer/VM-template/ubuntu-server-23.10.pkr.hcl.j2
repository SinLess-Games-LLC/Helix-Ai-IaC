##################################################################################
# Packer plugins
##################################################################################

packer {
  required_plugins {
    proxmox = {
      version = ">= 1.1.3"
      source  = "github.com/hashicorp/proxmox"
    }
  }
}

##################################################################################
# LOCALS
##################################################################################

locals {
  buildtime = formatdate("MM-DD-YYYY hh:mm ZZZ", timestamp())
}

##################################################################################
# Variable Definitions
##################################################################################

variable "proxmox_api_url" {
    type = string
}

variable "proxmox_api_token_id" {
    type = string
    sensitive = true
}

variable "proxmox_api_token_secret" {
    type = string
    sensitive = true
}

variable "proxmox_node_name" {
    type = string
}

# iso settings
variable "iso_file" {
    type = string
}

variable "iso_url" {
    type = string
}

variable "iso_checksum" {
    type = string
}

variable "iso_storage_pool" {
    type = string
}

variable "unmount_iso" {
    type = string
}

variable "ssh_username" {
    type = string
}

variable "ssh_password" {
    type = string
    sensitive = true
}

variable "ssh_private_key_file" {
    type = string
    sensitive = true
}

##################################################################################
# SOURCE
##################################################################################

# Resource Definiation for the VM Template
source "proxmox-iso" "ubuntu-server-2310" {

    # Proxmox Connection Settings
    proxmox_url = var.proxmox_api_url
    username = var.proxmox_api_token_id
    token = var.proxmox_api_token_secret

    # VM General Settings
    node = var.proxmox_node_name
    vm_id = 9000
    vm_name = ubuntu-server-23.10-template
    template_description = "Ubuntu Server 23.10 Image. Built by HashiCorp Packer on ${local.buildtime}."
    # VM OS Settings
    # (Option 1) Local ISO File
    iso_file = var.iso_file
    # - or -
    # (Option 2) Download ISO
    iso_url          = var.iso_url
    iso_checksum     = var.iso_checksum
    iso_storage_pool = var.iso_storage_pool
    unmount_iso = true

    # VM System Settings
    qemu_agent = true
    onboot = true

    # VM Hard Disk Settings
    scsi_controller = "virtio-scsi-pci"

    disks {
      disk_size    = "100G"
      format       = "raw"
      storage_pool = "Group_3"
      type         = "scsi"
    }

    # VM CPU Settings
    cores = 1

    # VM Memory Settings
    memory = 2048

    # VM Network Settings
    network_adapters {
        model    = "virtio"
        bridge   = "vmbr0"
        firewall = "false"
    }

    # VM Cloud-Init Settings
    cloud_init = true
    cloud_init_storage_pool = "local-lvm"

    # PACKER Boot Commands
    boot_command = [
      "<esc><wait>",
      "e<wait>",
      "<down><down><down><end>",
      "<bs><bs><bs><bs><wait>",
      "autoinstall ds=nocloud-net;s=/cidata/ ---<wait>",
      "<f10><wait>"
    ]
    boot = "c"
    boot_wait = "5s"

    # PACKER Autoinstall Settings
    additional_iso_files {
      cd_files = [
        "./Packer/VM-template/http/meta-data",
        "./Packer/VM-template/http/user-data"
      ]
      cd_label = "cidata"
      iso_storage_pool = "local"
    }

    ssh_username = var.ssh_username
    # (Option 1) Add your Password here
    ssh_password = var.ssh_password
    # - or -
    # (Option 2) Add your Private SSH KEY file here
    ssh_private_key_file = var.ssh_private_key_file

    # Raise the timeout, when installation takes longer
    ssh_port = var.ssh_port
    ssh_timeout = var.ssh_timeout
    ssh_handshake_attempts = var.ssh_handshake_attempts
}

# Build Definition to create the VM Template
build {
  provisioner "shell-local" {
    command = "echo 'Press Ctrl+C to cancel the build.\n Startinh the build in 5 seconds...'"
  }

  provisioner "shell-local" {
    pause_before = "5s"
    command = "echo 'Starting to build the VM Template...'"
  }

  name = "ubuntu-server-23.10"
  sources = ["source.proxmox-iso.ubuntu-server-2310"]

  # Provisioning the VM Template for Cloud-Init Integration in Proxmox #1
  provisioner "shell" {
    inline = [
      "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done",
      "sudo rm /etc/ssh/ssh_host_*",
      "sudo truncate -s 0 /etc/machine-id",
      "sudo apt -y autoremove --purge",
      "sudo apt -y clean",
      "sudo apt -y autoclean",
      "sudo cloud-init clean",
      "sudo rm -f /etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg",
      "sudo sync"
    ]
  }

  # Provisioning the VM Template for Cloud-Init Integration in Proxmox #2
  provisioner "file" {
    source = "./Packer/VM-template/files/99-pve.cfg"
    destination = "/tmp/99-pve.cfg"
  }

  # Provisioning the VM Template for Cloud-Init Integration in Proxmox #3
  provisioner "shell" {
    inline = [ "sudo cp /tmp/99-pve.cfg /etc/cloud/cloud.cfg.d/99-pve.cfg" ]
  }

  provisioner "shell" {
    inline = [
      "sudo apt-get update -y ",
      "sudo apt-get install -y openssh-server sudo qemu-guest-agent wget zsh curl software-properties-common python3 python3-pip net-tools git"
    ]
  }

  # Set up the VM for zsh
  provisioner "shell" {
    inline = [
      "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"",
      "git clone https://github.com/zsh-users/zsh-autosuggestions $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions",
      "git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting",
      "sed -i 's/ZSH_THEME=\"devcontainers\"/ZSH_THEME=\"strug\"/g' ~/.zshrc",
      "sed -i 's/plugins=(git)/plugins=(git ansible aws colorize bundler dotenv docker docker-compose direnv fluxcd git-flow git-commit git-extras gitignore helm istioctl kubectl sudo suse systemd terraform vagrant vault vscode zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting)/' ~/.zshrc"
    ]
  }

  provisioner "shell-local" {
    command = "echo 'ubuntu-server-23.10  template created successfully!'"
  }
}
